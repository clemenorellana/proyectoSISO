
Keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000e96  00000f2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800104  00800104  00000f2e  2**0
                  ALLOC
  3 .stab         00000924  00000000  00000000  00000f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e1  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002f8  00000000  00000000  00001935  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000899  00000000  00000000  00001c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004fca  00000000  00000000  000024c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012ff  00000000  00000000  00007490  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004918  00000000  00000000  0000878f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000470  00000000  00000000  0000d0a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002541  00000000  00000000  0000d518  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002eca  00000000  00000000  0000fa59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000087b  00000000  00000000  00012923  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000568  00000000  00000000  0001319e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
   0:	ab c0       	rjmp	.+342    	; 0x158 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop
   4:	c6 c0       	rjmp	.+396    	; 0x192 <__bad_interrupt>
   6:	00 00       	nop
   8:	c4 c0       	rjmp	.+392    	; 0x192 <__bad_interrupt>
   a:	00 00       	nop
   c:	c2 c0       	rjmp	.+388    	; 0x192 <__bad_interrupt>
   e:	00 00       	nop
  10:	c0 c0       	rjmp	.+384    	; 0x192 <__bad_interrupt>
  12:	00 00       	nop
  14:	be c0       	rjmp	.+380    	; 0x192 <__bad_interrupt>
  16:	00 00       	nop
  18:	bc c0       	rjmp	.+376    	; 0x192 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ba c0       	rjmp	.+372    	; 0x192 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b8 c0       	rjmp	.+368    	; 0x192 <__bad_interrupt>
  22:	00 00       	nop
  24:	b6 c0       	rjmp	.+364    	; 0x192 <__bad_interrupt>
  26:	00 00       	nop
  28:	dd c4       	rjmp	.+2490   	; 0x9e4 <__vector_10>
  2a:	00 00       	nop
  2c:	b2 c0       	rjmp	.+356    	; 0x192 <__bad_interrupt>
  2e:	00 00       	nop
  30:	b0 c0       	rjmp	.+352    	; 0x192 <__bad_interrupt>
  32:	00 00       	nop
  34:	ae c0       	rjmp	.+348    	; 0x192 <__bad_interrupt>
  36:	00 00       	nop
  38:	ac c0       	rjmp	.+344    	; 0x192 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	aa c0       	rjmp	.+340    	; 0x192 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a8 c0       	rjmp	.+336    	; 0x192 <__bad_interrupt>
  42:	00 00       	nop
  44:	a6 c0       	rjmp	.+332    	; 0x192 <__bad_interrupt>
  46:	00 00       	nop
  48:	a4 c0       	rjmp	.+328    	; 0x192 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	a2 c0       	rjmp	.+324    	; 0x192 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a0 c0       	rjmp	.+320    	; 0x192 <__bad_interrupt>
  52:	00 00       	nop
  54:	9e c0       	rjmp	.+316    	; 0x192 <__bad_interrupt>
  56:	00 00       	nop
  58:	9c c0       	rjmp	.+312    	; 0x192 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	9a c0       	rjmp	.+308    	; 0x192 <__bad_interrupt>
  5e:	00 00       	nop
  60:	98 c0       	rjmp	.+304    	; 0x192 <__bad_interrupt>
  62:	00 00       	nop
  64:	96 c0       	rjmp	.+300    	; 0x192 <__bad_interrupt>
  66:	00 00       	nop
  68:	94 c0       	rjmp	.+296    	; 0x192 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	92 c0       	rjmp	.+292    	; 0x192 <__bad_interrupt>
  6e:	00 00       	nop
  70:	90 c0       	rjmp	.+288    	; 0x192 <__bad_interrupt>
  72:	00 00       	nop
  74:	8e c0       	rjmp	.+284    	; 0x192 <__bad_interrupt>
  76:	00 00       	nop
  78:	8c c0       	rjmp	.+280    	; 0x192 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	8a c0       	rjmp	.+276    	; 0x192 <__bad_interrupt>
  7e:	00 00       	nop
  80:	88 c0       	rjmp	.+272    	; 0x192 <__bad_interrupt>
  82:	00 00       	nop
  84:	86 c0       	rjmp	.+268    	; 0x192 <__bad_interrupt>
  86:	00 00       	nop
  88:	84 c0       	rjmp	.+264    	; 0x192 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	82 c0       	rjmp	.+260    	; 0x192 <__bad_interrupt>
  8e:	00 00       	nop
  90:	80 c0       	rjmp	.+256    	; 0x192 <__bad_interrupt>
  92:	00 00       	nop
  94:	7e c0       	rjmp	.+252    	; 0x192 <__bad_interrupt>
  96:	00 00       	nop

00000098 <KeyboardReport>:
  98:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
  a8:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
  b8:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
  c8:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0        %e....)e..u....

000000d7 <DeviceDescriptor>:
  d7:	12 01 10 01 00 00 00 08 41 23 42 00 01 00 01 02     ........A#B.....
  e7:	00 01                                               ..

000000e9 <ConfigurationDescriptor>:
  e9:	09 02 29 00 01 01 00 c0 32 09 04 00 00 02 03 01     ..).....2.......
  f9:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
 109:	00 05 07 05 02 03 08 00 05                          .........

00000112 <LanguageString>:
 112:	04 03 09 04                                         ....

00000116 <ManufacturerString>:
 116:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 126:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000130 <ProductString>:
 130:	26 03 4c 00 55 00 46 00 41 00 20 00 4b 00 65 00     &.L.U.F.A. .K.e.
 140:	79 00 62 00 6f 00 61 00 72 00 64 00 20 00 44 00     y.b.o.a.r.d. .D.
 150:	65 00 6d 00 6f 00 00 00                             e.m.o...

00000158 <__ctors_end>:
 158:	11 24       	eor	r1, r1
 15a:	1f be       	out	0x3f, r1	; 63
 15c:	cf ef       	ldi	r28, 0xFF	; 255
 15e:	d0 e2       	ldi	r29, 0x20	; 32
 160:	de bf       	out	0x3e, r29	; 62
 162:	cd bf       	out	0x3d, r28	; 61

00000164 <__do_copy_data>:
 164:	11 e0       	ldi	r17, 0x01	; 1
 166:	a0 e0       	ldi	r26, 0x00	; 0
 168:	b1 e0       	ldi	r27, 0x01	; 1
 16a:	e6 e9       	ldi	r30, 0x96	; 150
 16c:	fe e0       	ldi	r31, 0x0E	; 14
 16e:	00 e0       	ldi	r16, 0x00	; 0
 170:	0b bf       	out	0x3b, r16	; 59
 172:	02 c0       	rjmp	.+4      	; 0x178 <__do_copy_data+0x14>
 174:	07 90       	elpm	r0, Z+
 176:	0d 92       	st	X+, r0
 178:	a4 30       	cpi	r26, 0x04	; 4
 17a:	b1 07       	cpc	r27, r17
 17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0x10>

0000017e <__do_clear_bss>:
 17e:	11 e0       	ldi	r17, 0x01	; 1
 180:	a4 e0       	ldi	r26, 0x04	; 4
 182:	b1 e0       	ldi	r27, 0x01	; 1
 184:	01 c0       	rjmp	.+2      	; 0x188 <.do_clear_bss_start>

00000186 <.do_clear_bss_loop>:
 186:	1d 92       	st	X+, r1

00000188 <.do_clear_bss_start>:
 188:	ab 31       	cpi	r26, 0x1B	; 27
 18a:	b1 07       	cpc	r27, r17
 18c:	e1 f7       	brne	.-8      	; 0x186 <.do_clear_bss_loop>
 18e:	df d1       	rcall	.+958    	; 0x54e <main>
 190:	80 c6       	rjmp	.+3328   	; 0xe92 <_exit>

00000192 <__bad_interrupt>:
 192:	36 cf       	rjmp	.-404    	; 0x0 <__vectors>

00000194 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 194:	9b b1       	in	r25, 0x0b	; 11
 196:	9f 70       	andi	r25, 0x0F	; 15
 198:	98 2b       	or	r25, r24
 19a:	9b b9       	out	0x0b, r25	; 11
			}
 19c:	08 95       	ret

0000019e <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 19e:	84 b7       	in	r24, 0x34	; 52
 1a0:	87 7f       	andi	r24, 0xF7	; 247
 1a2:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 1a4:	88 e1       	ldi	r24, 0x18	; 24
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	80 93 60 00 	sts	0x0060, r24
 1ae:	10 92 60 00 	sts	0x0060, r1
 1b2:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	80 e8       	ldi	r24, 0x80	; 128
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	80 93 61 00 	sts	0x0061, r24
 1c0:	90 93 61 00 	sts	0x0061, r25
 1c4:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
 1c6:	84 b1       	in	r24, 0x04	; 4
 1c8:	8f 71       	andi	r24, 0x1F	; 31
 1ca:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
 1cc:	8d b1       	in	r24, 0x0d	; 13
 1ce:	8f 7c       	andi	r24, 0xCF	; 207
 1d0:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
 1d2:	85 b1       	in	r24, 0x05	; 5
 1d4:	80 6e       	ori	r24, 0xE0	; 224
 1d6:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
 1d8:	8e b1       	in	r24, 0x0e	; 14
 1da:	80 63       	ori	r24, 0x30	; 48
 1dc:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1de:	8a b1       	in	r24, 0x0a	; 10
 1e0:	80 6f       	ori	r24, 0xF0	; 240
 1e2:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1e4:	8b b1       	in	r24, 0x0b	; 11
 1e6:	8f 70       	andi	r24, 0x0F	; 15
 1e8:	8b b9       	out	0x0b, r24	; 11
#endif

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
 1ea:	e1 d3       	rcall	.+1986   	; 0x9ae <USB_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 1ec:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 1ee:	72 9a       	sbi	0x0e, 2	; 14
	Buttons_Init();
}
 1f0:	08 95       	ret

000001f2 <EVENT_USB_Device_Connect>:
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 1f2:	80 ea       	ldi	r24, 0xA0	; 160
 1f4:	cf df       	rcall	.-98     	; 0x194 <LEDs_SetAllLEDs>

	/* Default to report protocol on connect */
	UsingReportProtocol = true;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	80 93 02 01 	sts	0x0102, r24
}
 1fc:	08 95       	ret

000001fe <EVENT_USB_Device_Disconnect>:
 *  the status LEDs.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 1fe:	80 e1       	ldi	r24, 0x10	; 16
}
 200:	c9 cf       	rjmp	.-110    	; 0x194 <LEDs_SetAllLEDs>

00000202 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host sets the current configuration
 *  of the USB device after enumeration, and configures the keyboard device endpoints.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 202:	1f 93       	push	r17
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	61 ec       	ldi	r22, 0xC1	; 193
 208:	42 e0       	ldi	r20, 0x02	; 2
 20a:	00 d3       	rcall	.+1536   	; 0x80c <Endpoint_ConfigureEndpoint_Prv>
 20c:	18 2f       	mov	r17, r24
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	60 ec       	ldi	r22, 0xC0	; 192
 212:	42 e0       	ldi	r20, 0x02	; 2
 214:	fb d2       	rcall	.+1526   	; 0x80c <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
 216:	90 91 e2 00 	lds	r25, 0x00E2
 21a:	94 60       	ori	r25, 0x04	; 4
 21c:	90 93 e2 00 	sts	0x00E2, r25
	bool ConfigSuccess = true;

	/* Setup HID Report Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(KEYBOARD_IN_EPADDR, EP_TYPE_INTERRUPT, KEYBOARD_EPSIZE, 1);
 220:	21 2f       	mov	r18, r17
 222:	30 e0       	ldi	r19, 0x00	; 0
	ConfigSuccess &= Endpoint_ConfigureEndpoint(KEYBOARD_OUT_EPADDR, EP_TYPE_INTERRUPT, KEYBOARD_EPSIZE, 1);
 224:	90 e0       	ldi	r25, 0x00	; 0
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	/* Setup HID Report Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(KEYBOARD_IN_EPADDR, EP_TYPE_INTERRUPT, KEYBOARD_EPSIZE, 1);
 226:	28 23       	and	r18, r24
 228:	39 23       	and	r19, r25

	/* Turn on Start-of-Frame events for tracking HID report period expiry */
	USB_Device_EnableSOFEvents();

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 22a:	20 ff       	sbrs	r18, 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <EVENT_USB_Device_ConfigurationChanged+0x30>
 22e:	80 e6       	ldi	r24, 0x60	; 96
 230:	01 c0       	rjmp	.+2      	; 0x234 <EVENT_USB_Device_ConfigurationChanged+0x32>
 232:	80 e9       	ldi	r24, 0x90	; 144
 234:	af df       	rcall	.-162    	; 0x194 <LEDs_SetAllLEDs>
}
 236:	1f 91       	pop	r17
 238:	08 95       	ret

0000023a <EVENT_USB_Device_StartOfFrame>:

/** Event handler for the USB device Start Of Frame event. */
void EVENT_USB_Device_StartOfFrame(void)
{
	/* One millisecond has elapsed, decrement the idle time remaining counter if it has not already elapsed */
	if (IdleMSRemaining)
 23a:	80 91 04 01 	lds	r24, 0x0104
 23e:	90 91 05 01 	lds	r25, 0x0105
 242:	00 97       	sbiw	r24, 0x00	; 0
 244:	29 f0       	breq	.+10     	; 0x250 <EVENT_USB_Device_StartOfFrame+0x16>
	  IdleMSRemaining--;
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	90 93 05 01 	sts	0x0105, r25
 24c:	80 93 04 01 	sts	0x0104, r24
 250:	08 95       	ret

00000252 <CreateKeyboardReport>:
/** Fills the given HID report data structure with the next HID report to send to the host.
 *
 *  \param[out] ReportData  Pointer to a HID report data structure to be filled
 */
void CreateKeyboardReport(USB_KeyboardReport_Data_t* const ReportData)
{
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	fc 01       	movw	r30, r24
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 258:	23 b1       	in	r18, 0x03	; 3
 25a:	8c b1       	in	r24, 0x0c	; 12
 25c:	80 95       	com	r24
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	80 73       	andi	r24, 0x30	; 48
 262:	90 70       	andi	r25, 0x00	; 0
 264:	95 95       	asr	r25
 266:	87 95       	ror	r24
 268:	20 95       	com	r18
 26a:	20 7e       	andi	r18, 0xE0	; 224
 26c:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
 26e:	9c b1       	in	r25, 0x0c	; 12
 270:	90 95       	com	r25
 272:	94 70       	andi	r25, 0x04	; 4
	uint8_t ButtonStatus_LCL  = Buttons_GetStatus();

	uint8_t UsedKeyCodes      = 0;

	/* Clear the report contents */
	memset(ReportData, 0, sizeof(USB_KeyboardReport_Data_t));
 274:	88 e0       	ldi	r24, 0x08	; 8
 276:	ef 01       	movw	r28, r30
 278:	19 92       	st	Y+, r1
 27a:	8a 95       	dec	r24
 27c:	e9 f7       	brne	.-6      	; 0x278 <CreateKeyboardReport+0x26>

	/* Make sent key uppercase by indicating that the left shift key is pressed */
	ReportData->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	80 83       	st	Z, r24

	if (JoyStatus_LCL & JOY_UP)
 282:	27 ff       	sbrs	r18, 7
 284:	02 c0       	rjmp	.+4      	; 0x28a <CreateKeyboardReport+0x38>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_A;
 286:	84 e0       	ldi	r24, 0x04	; 4
 288:	03 c0       	rjmp	.+6      	; 0x290 <CreateKeyboardReport+0x3e>
	else if (JoyStatus_LCL & JOY_DOWN)
 28a:	24 ff       	sbrs	r18, 4
 28c:	04 c0       	rjmp	.+8      	; 0x296 <CreateKeyboardReport+0x44>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_B;
 28e:	85 e0       	ldi	r24, 0x05	; 5
 290:	82 83       	std	Z+2, r24	; 0x02
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	01 c0       	rjmp	.+2      	; 0x298 <CreateKeyboardReport+0x46>
void CreateKeyboardReport(USB_KeyboardReport_Data_t* const ReportData)
{
	uint8_t JoyStatus_LCL     = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL  = Buttons_GetStatus();

	uint8_t UsedKeyCodes      = 0;
 296:	80 e0       	ldi	r24, 0x00	; 0
	if (JoyStatus_LCL & JOY_UP)
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_A;
	else if (JoyStatus_LCL & JOY_DOWN)
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_B;

	if (JoyStatus_LCL & JOY_LEFT)
 298:	26 ff       	sbrs	r18, 6
 29a:	05 c0       	rjmp	.+10     	; 0x2a6 <CreateKeyboardReport+0x54>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_C;
 29c:	df 01       	movw	r26, r30
 29e:	a8 0f       	add	r26, r24
 2a0:	b1 1d       	adc	r27, r1
 2a2:	36 e0       	ldi	r19, 0x06	; 6
 2a4:	06 c0       	rjmp	.+12     	; 0x2b2 <CreateKeyboardReport+0x60>
	else if (JoyStatus_LCL & JOY_RIGHT)
 2a6:	23 ff       	sbrs	r18, 3
 2a8:	08 c0       	rjmp	.+16     	; 0x2ba <CreateKeyboardReport+0x68>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_D;
 2aa:	df 01       	movw	r26, r30
 2ac:	a8 0f       	add	r26, r24
 2ae:	b1 1d       	adc	r27, r1
 2b0:	37 e0       	ldi	r19, 0x07	; 7
 2b2:	12 96       	adiw	r26, 0x02	; 2
 2b4:	3c 93       	st	X, r19
 2b6:	12 97       	sbiw	r26, 0x02	; 2
 2b8:	8f 5f       	subi	r24, 0xFF	; 255

	if (JoyStatus_LCL & JOY_PRESS)
 2ba:	25 ff       	sbrs	r18, 5
 2bc:	08 c0       	rjmp	.+16     	; 0x2ce <CreateKeyboardReport+0x7c>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_E;
 2be:	df 01       	movw	r26, r30
 2c0:	a8 0f       	add	r26, r24
 2c2:	b1 1d       	adc	r27, r1
 2c4:	28 e0       	ldi	r18, 0x08	; 8
 2c6:	12 96       	adiw	r26, 0x02	; 2
 2c8:	2c 93       	st	X, r18
 2ca:	12 97       	sbiw	r26, 0x02	; 2
 2cc:	8f 5f       	subi	r24, 0xFF	; 255

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
 2ce:	99 23       	and	r25, r25
 2d0:	21 f0       	breq	.+8      	; 0x2da <CreateKeyboardReport+0x88>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_F;
 2d2:	e8 0f       	add	r30, r24
 2d4:	f1 1d       	adc	r31, r1
 2d6:	89 e0       	ldi	r24, 0x09	; 9
 2d8:	82 83       	std	Z+2, r24	; 0x02
}
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <ProcessLEDReport>:
 */
void ProcessLEDReport(const uint8_t LEDReport)
{
	uint8_t LEDMask = LEDS_LED2;

	if (LEDReport & HID_KEYBOARD_LED_NUMLOCK)
 2e0:	28 2f       	mov	r18, r24
 2e2:	80 ff       	sbrs	r24, 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <ProcessLEDReport+0xa>
	  LEDMask |= LEDS_LED1;
 2e6:	80 e3       	ldi	r24, 0x30	; 48
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <ProcessLEDReport+0xc>
 *
 *  \param[in] LEDReport  LED status report from the host
 */
void ProcessLEDReport(const uint8_t LEDReport)
{
	uint8_t LEDMask = LEDS_LED2;
 2ea:	80 e2       	ldi	r24, 0x20	; 32

	if (LEDReport & HID_KEYBOARD_LED_NUMLOCK)
	  LEDMask |= LEDS_LED1;

	if (LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
 2ec:	21 fd       	sbrc	r18, 1
	  LEDMask |= LEDS_LED3;
 2ee:	80 68       	ori	r24, 0x80	; 128

	if (LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
 2f0:	22 fd       	sbrc	r18, 2
	  LEDMask |= LEDS_LED4;
 2f2:	80 64       	ori	r24, 0x40	; 64

	/* Set the status LEDs to the current Keyboard LED status */
	LEDs_SetAllLEDs(LEDMask);
}
 2f4:	4f cf       	rjmp	.-354    	; 0x194 <LEDs_SetAllLEDs>

000002f6 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	df 93       	push	r29
 2fc:	cf 93       	push	r28
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
 302:	29 97       	sbiw	r28, 0x09	; 9
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
 30e:	80 91 14 01 	lds	r24, 0x0114
 312:	83 30       	cpi	r24, 0x03	; 3
 314:	09 f4       	brne	.+2      	; 0x318 <EVENT_USB_Device_ControlRequest+0x22>
 316:	4b c0       	rjmp	.+150    	; 0x3ae <EVENT_USB_Device_ControlRequest+0xb8>
 318:	84 30       	cpi	r24, 0x04	; 4
 31a:	30 f4       	brcc	.+12     	; 0x328 <EVENT_USB_Device_ControlRequest+0x32>
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	71 f0       	breq	.+28     	; 0x33c <EVENT_USB_Device_ControlRequest+0x46>
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	09 f0       	breq	.+2      	; 0x326 <EVENT_USB_Device_ControlRequest+0x30>
 324:	99 c0       	rjmp	.+306    	; 0x458 <EVENT_USB_Device_ControlRequest+0x162>
 326:	7f c0       	rjmp	.+254    	; 0x426 <EVENT_USB_Device_ControlRequest+0x130>
 328:	8a 30       	cpi	r24, 0x0A	; 10
 32a:	09 f4       	brne	.+2      	; 0x32e <EVENT_USB_Device_ControlRequest+0x38>
 32c:	63 c0       	rjmp	.+198    	; 0x3f4 <EVENT_USB_Device_ControlRequest+0xfe>
 32e:	8b 30       	cpi	r24, 0x0B	; 11
 330:	09 f4       	brne	.+2      	; 0x334 <EVENT_USB_Device_ControlRequest+0x3e>
 332:	4a c0       	rjmp	.+148    	; 0x3c8 <EVENT_USB_Device_ControlRequest+0xd2>
 334:	89 30       	cpi	r24, 0x09	; 9
 336:	09 f0       	breq	.+2      	; 0x33a <EVENT_USB_Device_ControlRequest+0x44>
 338:	8f c0       	rjmp	.+286    	; 0x458 <EVENT_USB_Device_ControlRequest+0x162>
 33a:	19 c0       	rjmp	.+50     	; 0x36e <EVENT_USB_Device_ControlRequest+0x78>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 33c:	80 91 13 01 	lds	r24, 0x0113
 340:	81 3a       	cpi	r24, 0xA1	; 161
 342:	09 f0       	breq	.+2      	; 0x346 <EVENT_USB_Device_ControlRequest+0x50>
 344:	89 c0       	rjmp	.+274    	; 0x458 <EVENT_USB_Device_ControlRequest+0x162>
			{
				USB_KeyboardReport_Data_t KeyboardReportData;

				/* Create the next keyboard report for transmission to the host */
				CreateKeyboardReport(&KeyboardReportData);
 346:	8e 01       	movw	r16, r28
 348:	0f 5f       	subi	r16, 0xFF	; 255
 34a:	1f 4f       	sbci	r17, 0xFF	; 255
 34c:	c8 01       	movw	r24, r16
 34e:	81 df       	rcall	.-254    	; 0x252 <CreateKeyboardReport>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 350:	80 91 e8 00 	lds	r24, 0x00E8
 354:	87 7f       	andi	r24, 0xF7	; 247
 356:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&KeyboardReportData, sizeof(KeyboardReportData));
 35a:	c8 01       	movw	r24, r16
 35c:	68 e0       	ldi	r22, 0x08	; 8
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	99 d1       	rcall	.+818    	; 0x694 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 362:	80 91 e8 00 	lds	r24, 0x00E8
 366:	8b 77       	andi	r24, 0x7B	; 123
 368:	80 93 e8 00 	sts	0x00E8, r24
 36c:	75 c0       	rjmp	.+234    	; 0x458 <EVENT_USB_Device_ControlRequest+0x162>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 36e:	80 91 13 01 	lds	r24, 0x0113
 372:	81 32       	cpi	r24, 0x21	; 33
 374:	09 f0       	breq	.+2      	; 0x378 <EVENT_USB_Device_ControlRequest+0x82>
 376:	70 c0       	rjmp	.+224    	; 0x458 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 378:	80 91 e8 00 	lds	r24, 0x00E8
 37c:	87 7f       	andi	r24, 0xF7	; 247
 37e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Wait until the LED report has been sent by the host */
				while (!(Endpoint_IsOUTReceived()))
 382:	05 c0       	rjmp	.+10     	; 0x38e <EVENT_USB_Device_ControlRequest+0x98>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 384:	80 91 12 01 	lds	r24, 0x0112
 388:	88 23       	and	r24, r24
 38a:	09 f4       	brne	.+2      	; 0x38e <EVENT_USB_Device_ControlRequest+0x98>
 38c:	65 c0       	rjmp	.+202    	; 0x458 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 38e:	80 91 e8 00 	lds	r24, 0x00E8
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				/* Wait until the LED report has been sent by the host */
				while (!(Endpoint_IsOUTReceived()))
 392:	82 ff       	sbrs	r24, 2
 394:	f7 cf       	rjmp	.-18     	; 0x384 <EVENT_USB_Device_ControlRequest+0x8e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 396:	80 91 f1 00 	lds	r24, 0x00F1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 39a:	90 91 e8 00 	lds	r25, 0x00E8
 39e:	9b 77       	andi	r25, 0x7B	; 123
 3a0:	90 93 e8 00 	sts	0x00E8, r25

				/* Read in the LED report from the host */
				uint8_t LEDStatus = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 3a4:	89 87       	std	Y+9, r24	; 0x09
 3a6:	69 d2       	rcall	.+1234   	; 0x87a <Endpoint_ClearStatusStage>

				/* Process the incoming LED report */
				ProcessLEDReport(LEDStatus);
 3a8:	89 85       	ldd	r24, Y+9	; 0x09
 3aa:	9a df       	rcall	.-204    	; 0x2e0 <ProcessLEDReport>
 3ac:	55 c0       	rjmp	.+170    	; 0x458 <EVENT_USB_Device_ControlRequest+0x162>
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 3ae:	80 91 13 01 	lds	r24, 0x0113
 3b2:	81 3a       	cpi	r24, 0xA1	; 161
 3b4:	09 f0       	breq	.+2      	; 0x3b8 <EVENT_USB_Device_ControlRequest+0xc2>
 3b6:	50 c0       	rjmp	.+160    	; 0x458 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 3b8:	80 91 e8 00 	lds	r24, 0x00E8
 3bc:	87 7f       	andi	r24, 0xF7	; 247
 3be:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the current protocol flag to the host */
				Endpoint_Write_8(UsingReportProtocol);
 3c2:	80 91 02 01 	lds	r24, 0x0102
 3c6:	40 c0       	rjmp	.+128    	; 0x448 <EVENT_USB_Device_ControlRequest+0x152>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 3c8:	80 91 13 01 	lds	r24, 0x0113
 3cc:	81 32       	cpi	r24, 0x21	; 33
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <EVENT_USB_Device_ControlRequest+0xdc>
 3d0:	43 c0       	rjmp	.+134    	; 0x458 <EVENT_USB_Device_ControlRequest+0x162>
 3d2:	80 91 e8 00 	lds	r24, 0x00E8
 3d6:	87 7f       	andi	r24, 0xF7	; 247
 3d8:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 3dc:	4e d2       	rcall	.+1180   	; 0x87a <Endpoint_ClearStatusStage>

				/* Set or clear the flag depending on what the host indicates that the current Protocol should be */
				UsingReportProtocol = (USB_ControlRequest.wValue != 0);
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	80 91 15 01 	lds	r24, 0x0115
 3e4:	90 91 16 01 	lds	r25, 0x0116
 3e8:	00 97       	sbiw	r24, 0x00	; 0
 3ea:	09 f4       	brne	.+2      	; 0x3ee <EVENT_USB_Device_ControlRequest+0xf8>
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	20 93 02 01 	sts	0x0102, r18
 3f2:	32 c0       	rjmp	.+100    	; 0x458 <EVENT_USB_Device_ControlRequest+0x162>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 3f4:	80 91 13 01 	lds	r24, 0x0113
 3f8:	81 32       	cpi	r24, 0x21	; 33
 3fa:	71 f5       	brne	.+92     	; 0x458 <EVENT_USB_Device_ControlRequest+0x162>
 3fc:	80 91 e8 00 	lds	r24, 0x00E8
 400:	87 7f       	andi	r24, 0xF7	; 247
 402:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 406:	39 d2       	rcall	.+1138   	; 0x87a <Endpoint_ClearStatusStage>

				/* Get idle period in MSB, IdleCount must be multiplied by 4 to get number of milliseconds */
				IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 408:	80 91 15 01 	lds	r24, 0x0115
 40c:	90 91 16 01 	lds	r25, 0x0116
 410:	80 70       	andi	r24, 0x00	; 0
 412:	56 e0       	ldi	r21, 0x06	; 6
 414:	96 95       	lsr	r25
 416:	87 95       	ror	r24
 418:	5a 95       	dec	r21
 41a:	e1 f7       	brne	.-8      	; 0x414 <EVENT_USB_Device_ControlRequest+0x11e>
 41c:	90 93 01 01 	sts	0x0101, r25
 420:	80 93 00 01 	sts	0x0100, r24
 424:	19 c0       	rjmp	.+50     	; 0x458 <EVENT_USB_Device_ControlRequest+0x162>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 426:	80 91 13 01 	lds	r24, 0x0113
 42a:	81 3a       	cpi	r24, 0xA1	; 161
 42c:	a9 f4       	brne	.+42     	; 0x458 <EVENT_USB_Device_ControlRequest+0x162>
 42e:	80 91 e8 00 	lds	r24, 0x00E8
 432:	87 7f       	andi	r24, 0xF7	; 247
 434:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the current idle duration to the host, must be divided by 4 before sent to host */
				Endpoint_Write_8(IdleCount >> 2);
 438:	80 91 00 01 	lds	r24, 0x0100
 43c:	90 91 01 01 	lds	r25, 0x0101
 440:	96 95       	lsr	r25
 442:	87 95       	ror	r24
 444:	96 95       	lsr	r25
 446:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 448:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 44c:	80 91 e8 00 	lds	r24, 0x00E8
 450:	8e 77       	andi	r24, 0x7E	; 126
 452:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 456:	11 d2       	rcall	.+1058   	; 0x87a <Endpoint_ClearStatusStage>
			}

			break;
	}
}
 458:	29 96       	adiw	r28, 0x09	; 9
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	de bf       	out	0x3e, r29	; 62
 460:	0f be       	out	0x3f, r0	; 63
 462:	cd bf       	out	0x3d, r28	; 61
 464:	cf 91       	pop	r28
 466:	df 91       	pop	r29
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	08 95       	ret

0000046e <SendNextReport>:
	LEDs_SetAllLEDs(LEDMask);
}

/** Sends the next HID report to the host, via the keyboard data endpoint. */
void SendNextReport(void)
{
 46e:	df 93       	push	r29
 470:	cf 93       	push	r28
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	28 97       	sbiw	r28, 0x08	; 8
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
	static USB_KeyboardReport_Data_t PrevKeyboardReportData;
	USB_KeyboardReport_Data_t        KeyboardReportData;
	bool                             SendReport = false;

	/* Create the next keyboard report for transmission to the host */
	CreateKeyboardReport(&KeyboardReportData);
 482:	ce 01       	movw	r24, r28
 484:	01 96       	adiw	r24, 0x01	; 1
 486:	e5 de       	rcall	.-566    	; 0x252 <CreateKeyboardReport>

	/* Check if the idle period is set and has elapsed */
	if (IdleCount && (!(IdleMSRemaining)))
 488:	80 91 00 01 	lds	r24, 0x0100
 48c:	90 91 01 01 	lds	r25, 0x0101
 490:	00 97       	sbiw	r24, 0x00	; 0
 492:	69 f0       	breq	.+26     	; 0x4ae <SendNextReport+0x40>
 494:	20 91 04 01 	lds	r18, 0x0104
 498:	30 91 05 01 	lds	r19, 0x0105
 49c:	21 15       	cp	r18, r1
 49e:	31 05       	cpc	r19, r1
 4a0:	31 f4       	brne	.+12     	; 0x4ae <SendNextReport+0x40>
	{
		/* Reset the idle time remaining counter */
		IdleMSRemaining = IdleCount;
 4a2:	90 93 05 01 	sts	0x0105, r25
 4a6:	80 93 04 01 	sts	0x0104, r24

		/* Idle period is set and has elapsed, must send a report to the host */
		SendReport = true;
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e c0       	rjmp	.+28     	; 0x4ca <SendNextReport+0x5c>
	}
	else
	{
		/* Check to see if the report data has changed - if so a report MUST be sent */
		SendReport = (memcmp(&PrevKeyboardReportData, &KeyboardReportData, sizeof(USB_KeyboardReport_Data_t)) != 0);
 4ae:	86 e0       	ldi	r24, 0x06	; 6
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	be 01       	movw	r22, r28
 4b4:	6f 5f       	subi	r22, 0xFF	; 255
 4b6:	7f 4f       	sbci	r23, 0xFF	; 255
 4b8:	48 e0       	ldi	r20, 0x08	; 8
 4ba:	50 e0       	ldi	r21, 0x00	; 0
 4bc:	dd d4       	rcall	.+2490   	; 0xe78 <memcmp>
 4be:	9c 01       	movw	r18, r24
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	21 15       	cp	r18, r1
 4c4:	31 05       	cpc	r19, r1
 4c6:	09 f4       	brne	.+2      	; 0x4ca <SendNextReport+0x5c>
 4c8:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 4d0:	90 91 e8 00 	lds	r25, 0x00E8

	/* Select the Keyboard Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_IN_EPADDR);

	/* Check if Keyboard Endpoint Ready for Read/Write and if we should send a new report */
	if (Endpoint_IsReadWriteAllowed() && SendReport)
 4d4:	95 ff       	sbrs	r25, 5
 4d6:	17 c0       	rjmp	.+46     	; 0x506 <SendNextReport+0x98>
 4d8:	88 23       	and	r24, r24
 4da:	a9 f0       	breq	.+42     	; 0x506 <SendNextReport+0x98>
	{
		/* Save the current report data for later comparison to check for changes */
		PrevKeyboardReportData = KeyboardReportData;
 4dc:	a6 e0       	ldi	r26, 0x06	; 6
 4de:	b1 e0       	ldi	r27, 0x01	; 1
 4e0:	fe 01       	movw	r30, r28
 4e2:	31 96       	adiw	r30, 0x01	; 1
 4e4:	88 e0       	ldi	r24, 0x08	; 8
 4e6:	01 90       	ld	r0, Z+
 4e8:	0d 92       	st	X+, r0
 4ea:	81 50       	subi	r24, 0x01	; 1
 4ec:	e1 f7       	brne	.-8      	; 0x4e6 <SendNextReport+0x78>

		/* Write Keyboard Report Data */
		Endpoint_Write_Stream_LE(&KeyboardReportData, sizeof(KeyboardReportData), NULL);
 4ee:	ce 01       	movw	r24, r28
 4f0:	01 96       	adiw	r24, 0x01	; 1
 4f2:	68 e0       	ldi	r22, 0x08	; 8
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	50 e0       	ldi	r21, 0x00	; 0
 4fa:	6e d0       	rcall	.+220    	; 0x5d8 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4fc:	80 91 e8 00 	lds	r24, 0x00E8
 500:	8e 77       	andi	r24, 0x7E	; 126
 502:	80 93 e8 00 	sts	0x00E8, r24

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();
	}
}
 506:	28 96       	adiw	r28, 0x08	; 8
 508:	0f b6       	in	r0, 0x3f	; 63
 50a:	f8 94       	cli
 50c:	de bf       	out	0x3e, r29	; 62
 50e:	0f be       	out	0x3f, r0	; 63
 510:	cd bf       	out	0x3d, r28	; 61
 512:	cf 91       	pop	r28
 514:	df 91       	pop	r29
 516:	08 95       	ret

00000518 <ReceiveNextReport>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 51e:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the Keyboard LED Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_OUT_EPADDR);

	/* Check if Keyboard LED Endpoint contains a packet */
	if (Endpoint_IsOUTReceived())
 522:	82 ff       	sbrs	r24, 2
 524:	0c c0       	rjmp	.+24     	; 0x53e <ReceiveNextReport+0x26>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 526:	80 91 e8 00 	lds	r24, 0x00E8
	{
		/* Check to see if the packet contains data */
		if (Endpoint_IsReadWriteAllowed())
 52a:	85 ff       	sbrs	r24, 5
 52c:	03 c0       	rjmp	.+6      	; 0x534 <ReceiveNextReport+0x1c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 52e:	80 91 f1 00 	lds	r24, 0x00F1
		{
			/* Read in the LED report from the host */
			uint8_t LEDReport = Endpoint_Read_8();

			/* Process the read LED report from the host */
			ProcessLEDReport(LEDReport);
 532:	d6 de       	rcall	.-596    	; 0x2e0 <ProcessLEDReport>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 534:	80 91 e8 00 	lds	r24, 0x00E8
 538:	8b 77       	andi	r24, 0x7B	; 123
 53a:	80 93 e8 00 	sts	0x00E8, r24
 53e:	08 95       	ret

00000540 <HID_Task>:

/** Function to manage HID report generation and transmission to the host, when in report mode. */
void HID_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 540:	80 91 12 01 	lds	r24, 0x0112
 544:	84 30       	cpi	r24, 0x04	; 4
 546:	11 f4       	brne	.+4      	; 0x54c <HID_Task+0xc>
	  return;

	/* Send the next keypress report to the host */
	SendNextReport();
 548:	92 df       	rcall	.-220    	; 0x46e <SendNextReport>

	/* Process the LED report sent from the host */
	ReceiveNextReport();
 54a:	e6 cf       	rjmp	.-52     	; 0x518 <ReceiveNextReport>
 54c:	08 95       	ret

0000054e <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
 54e:	27 de       	rcall	.-946    	; 0x19e <SetupHardware>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 550:	80 e1       	ldi	r24, 0x10	; 16
 552:	20 de       	rcall	.-960    	; 0x194 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 554:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		HID_Task();
 556:	f4 df       	rcall	.-24     	; 0x540 <HID_Task>
		USB_USBTask();
 558:	73 d4       	rcall	.+2278   	; 0xe40 <USB_USBTask>
 55a:	fd cf       	rjmp	.-6      	; 0x556 <main+0x8>

0000055c <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 55c:	93 30       	cpi	r25, 0x03	; 3
 55e:	89 f0       	breq	.+34     	; 0x582 <CALLBACK_USB_GetDescriptor+0x26>
 560:	94 30       	cpi	r25, 0x04	; 4
 562:	28 f4       	brcc	.+10     	; 0x56e <CALLBACK_USB_GetDescriptor+0x12>
 564:	91 30       	cpi	r25, 0x01	; 1
 566:	49 f1       	breq	.+82     	; 0x5ba <CALLBACK_USB_GetDescriptor+0x5e>
 568:	92 30       	cpi	r25, 0x02	; 2
 56a:	61 f5       	brne	.+88     	; 0x5c4 <CALLBACK_USB_GetDescriptor+0x68>
 56c:	05 c0       	rjmp	.+10     	; 0x578 <CALLBACK_USB_GetDescriptor+0x1c>
 56e:	91 32       	cpi	r25, 0x21	; 33
 570:	d1 f0       	breq	.+52     	; 0x5a6 <CALLBACK_USB_GetDescriptor+0x4a>
 572:	92 32       	cpi	r25, 0x22	; 34
 574:	39 f5       	brne	.+78     	; 0x5c4 <CALLBACK_USB_GetDescriptor+0x68>
 576:	1c c0       	rjmp	.+56     	; 0x5b0 <CALLBACK_USB_GetDescriptor+0x54>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 578:	29 e2       	ldi	r18, 0x29	; 41
 57a:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 57c:	e9 ee       	ldi	r30, 0xE9	; 233
 57e:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 580:	25 c0       	rjmp	.+74     	; 0x5cc <CALLBACK_USB_GetDescriptor+0x70>
		case DTYPE_String:
			switch (DescriptorNumber)
 582:	81 30       	cpi	r24, 0x01	; 1
 584:	41 f0       	breq	.+16     	; 0x596 <CALLBACK_USB_GetDescriptor+0x3a>
 586:	81 30       	cpi	r24, 0x01	; 1
 588:	18 f0       	brcs	.+6      	; 0x590 <CALLBACK_USB_GetDescriptor+0x34>
 58a:	82 30       	cpi	r24, 0x02	; 2
 58c:	d9 f4       	brne	.+54     	; 0x5c4 <CALLBACK_USB_GetDescriptor+0x68>
 58e:	06 c0       	rjmp	.+12     	; 0x59c <CALLBACK_USB_GetDescriptor+0x40>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 590:	e2 e1       	ldi	r30, 0x12	; 18
 592:	f1 e0       	ldi	r31, 0x01	; 1
 594:	05 c0       	rjmp	.+10     	; 0x5a0 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 596:	e6 e1       	ldi	r30, 0x16	; 22
 598:	f1 e0       	ldi	r31, 0x01	; 1
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <CALLBACK_USB_GetDescriptor+0x44>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 59c:	e0 e3       	ldi	r30, 0x30	; 48
 59e:	f1 e0       	ldi	r31, 0x01	; 1
 5a0:	24 91       	lpm	r18, Z+
 5a2:	30 e0       	ldi	r19, 0x00	; 0
					break;
 5a4:	13 c0       	rjmp	.+38     	; 0x5cc <CALLBACK_USB_GetDescriptor+0x70>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 5a6:	29 e0       	ldi	r18, 0x09	; 9
 5a8:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
 5aa:	eb ef       	ldi	r30, 0xFB	; 251
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 5ae:	0e c0       	rjmp	.+28     	; 0x5cc <CALLBACK_USB_GetDescriptor+0x70>
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
 5b0:	2f e3       	ldi	r18, 0x3F	; 63
 5b2:	30 e0       	ldi	r19, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
 5b4:	e8 e9       	ldi	r30, 0x98	; 152
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(KeyboardReport);
			break;
 5b8:	09 c0       	rjmp	.+18     	; 0x5cc <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 5ba:	22 e1       	ldi	r18, 0x12	; 18
 5bc:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 5be:	e7 ed       	ldi	r30, 0xD7	; 215
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	04 c0       	rjmp	.+8      	; 0x5cc <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 5c4:	20 e0       	ldi	r18, 0x00	; 0
 5c6:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 5c8:	e0 e0       	ldi	r30, 0x00	; 0
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
 5cc:	da 01       	movw	r26, r20
 5ce:	11 96       	adiw	r26, 0x01	; 1
 5d0:	fc 93       	st	X, r31
 5d2:	ee 93       	st	-X, r30
	return Size;
}
 5d4:	c9 01       	movw	r24, r18
 5d6:	08 95       	ret

000005d8 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 5d8:	8f 92       	push	r8
 5da:	9f 92       	push	r9
 5dc:	bf 92       	push	r11
 5de:	cf 92       	push	r12
 5e0:	df 92       	push	r13
 5e2:	ef 92       	push	r14
 5e4:	ff 92       	push	r15
 5e6:	0f 93       	push	r16
 5e8:	1f 93       	push	r17
 5ea:	df 93       	push	r29
 5ec:	cf 93       	push	r28
 5ee:	0f 92       	push	r0
 5f0:	cd b7       	in	r28, 0x3d	; 61
 5f2:	de b7       	in	r29, 0x3e	; 62
 5f4:	e8 2e       	mov	r14, r24
 5f6:	4b 01       	movw	r8, r22
 5f8:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 5fa:	99 83       	std	Y+1, r25	; 0x01
 5fc:	5f d1       	rcall	.+702    	; 0x8bc <Endpoint_WaitUntilReady>
 5fe:	b8 2e       	mov	r11, r24
 600:	99 81       	ldd	r25, Y+1	; 0x01
 602:	88 23       	and	r24, r24
 604:	c9 f5       	brne	.+114    	; 0x678 <Endpoint_Write_Stream_LE+0xa0>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 606:	f9 2e       	mov	r15, r25
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
 608:	01 15       	cp	r16, r1
 60a:	11 05       	cpc	r17, r1
 60c:	39 f0       	breq	.+14     	; 0x61c <Endpoint_Write_Stream_LE+0x44>
	{
		Length -= *BytesProcessed;
 60e:	f8 01       	movw	r30, r16
 610:	20 81       	ld	r18, Z
 612:	31 81       	ldd	r19, Z+1	; 0x01
 614:	82 1a       	sub	r8, r18
 616:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 618:	e2 0e       	add	r14, r18
 61a:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 61c:	cc 24       	eor	r12, r12
 61e:	dd 24       	eor	r13, r13
 620:	26 c0       	rjmp	.+76     	; 0x66e <Endpoint_Write_Stream_LE+0x96>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 622:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 626:	85 fd       	sbrc	r24, 5
 628:	17 c0       	rjmp	.+46     	; 0x658 <Endpoint_Write_Stream_LE+0x80>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 62a:	80 91 e8 00 	lds	r24, 0x00E8
 62e:	8e 77       	andi	r24, 0x7E	; 126
 630:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 634:	05 d4       	rcall	.+2058   	; 0xe40 <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
 636:	01 15       	cp	r16, r1
 638:	11 05       	cpc	r17, r1
 63a:	51 f0       	breq	.+20     	; 0x650 <Endpoint_Write_Stream_LE+0x78>
			{
				*BytesProcessed += BytesInTransfer;
 63c:	f8 01       	movw	r30, r16
 63e:	80 81       	ld	r24, Z
 640:	91 81       	ldd	r25, Z+1	; 0x01
 642:	8c 0d       	add	r24, r12
 644:	9d 1d       	adc	r25, r13
 646:	91 83       	std	Z+1, r25	; 0x01
 648:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 64a:	25 e0       	ldi	r18, 0x05	; 5
 64c:	b2 2e       	mov	r11, r18
 64e:	14 c0       	rjmp	.+40     	; 0x678 <Endpoint_Write_Stream_LE+0xa0>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 650:	35 d1       	rcall	.+618    	; 0x8bc <Endpoint_WaitUntilReady>
 652:	88 23       	and	r24, r24
 654:	61 f0       	breq	.+24     	; 0x66e <Endpoint_Write_Stream_LE+0x96>
 656:	0f c0       	rjmp	.+30     	; 0x676 <Endpoint_Write_Stream_LE+0x9e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 658:	f7 01       	movw	r30, r14
 65a:	81 91       	ld	r24, Z+
 65c:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 65e:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 662:	08 94       	sec
 664:	81 08       	sbc	r8, r1
 666:	91 08       	sbc	r9, r1
			BytesInTransfer++;
 668:	08 94       	sec
 66a:	c1 1c       	adc	r12, r1
 66c:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 66e:	81 14       	cp	r8, r1
 670:	91 04       	cpc	r9, r1
 672:	b9 f6       	brne	.-82     	; 0x622 <Endpoint_Write_Stream_LE+0x4a>
 674:	01 c0       	rjmp	.+2      	; 0x678 <Endpoint_Write_Stream_LE+0xa0>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 676:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 678:	8b 2d       	mov	r24, r11
 67a:	0f 90       	pop	r0
 67c:	cf 91       	pop	r28
 67e:	df 91       	pop	r29
 680:	1f 91       	pop	r17
 682:	0f 91       	pop	r16
 684:	ff 90       	pop	r15
 686:	ef 90       	pop	r14
 688:	df 90       	pop	r13
 68a:	cf 90       	pop	r12
 68c:	bf 90       	pop	r11
 68e:	9f 90       	pop	r9
 690:	8f 90       	pop	r8
 692:	08 95       	ret

00000694 <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 694:	28 2f       	mov	r18, r24
 696:	39 2f       	mov	r19, r25
 698:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 69a:	80 91 19 01 	lds	r24, 0x0119
 69e:	90 91 1a 01 	lds	r25, 0x011A
 6a2:	86 17       	cp	r24, r22
 6a4:	97 07       	cpc	r25, r23
 6a6:	18 f4       	brcc	.+6      	; 0x6ae <Endpoint_Write_Control_Stream_LE+0x1a>
 6a8:	bc 01       	movw	r22, r24
 6aa:	20 e0       	ldi	r18, 0x00	; 0
 6ac:	37 c0       	rjmp	.+110    	; 0x71c <Endpoint_Write_Control_Stream_LE+0x88>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 6ae:	61 15       	cp	r22, r1
 6b0:	71 05       	cpc	r23, r1
 6b2:	d9 f7       	brne	.-10     	; 0x6aa <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6b4:	80 91 e8 00 	lds	r24, 0x00E8
 6b8:	8e 77       	andi	r24, 0x7E	; 126
 6ba:	80 93 e8 00 	sts	0x00E8, r24
 6be:	f5 cf       	rjmp	.-22     	; 0x6aa <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 6c0:	80 91 12 01 	lds	r24, 0x0112

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 6c4:	88 23       	and	r24, r24
 6c6:	09 f4       	brne	.+2      	; 0x6ca <Endpoint_Write_Control_Stream_LE+0x36>
 6c8:	3f c0       	rjmp	.+126    	; 0x748 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 6ca:	85 30       	cpi	r24, 0x05	; 5
 6cc:	c9 f1       	breq	.+114    	; 0x740 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6ce:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 6d2:	83 fd       	sbrc	r24, 3
 6d4:	37 c0       	rjmp	.+110    	; 0x744 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6d6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 6da:	82 fd       	sbrc	r24, 2
 6dc:	2b c0       	rjmp	.+86     	; 0x734 <Endpoint_Write_Control_Stream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 6de:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 6e2:	80 ff       	sbrs	r24, 0
 6e4:	1b c0       	rjmp	.+54     	; 0x71c <Endpoint_Write_Control_Stream_LE+0x88>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 6e6:	80 91 f2 00 	lds	r24, 0x00F2
 6ea:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 6ee:	06 c0       	rjmp	.+12     	; 0x6fc <Endpoint_Write_Control_Stream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 6f0:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 6f2:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 6f6:	61 50       	subi	r22, 0x01	; 1
 6f8:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 6fa:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 6fc:	61 15       	cp	r22, r1
 6fe:	71 05       	cpc	r23, r1
 700:	19 f0       	breq	.+6      	; 0x708 <Endpoint_Write_Control_Stream_LE+0x74>
 702:	88 30       	cpi	r24, 0x08	; 8
 704:	91 05       	cpc	r25, r1
 706:	a0 f3       	brcs	.-24     	; 0x6f0 <Endpoint_Write_Control_Stream_LE+0x5c>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 708:	21 e0       	ldi	r18, 0x01	; 1
 70a:	88 30       	cpi	r24, 0x08	; 8
 70c:	91 05       	cpc	r25, r1
 70e:	09 f0       	breq	.+2      	; 0x712 <Endpoint_Write_Control_Stream_LE+0x7e>
 710:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 712:	80 91 e8 00 	lds	r24, 0x00E8
 716:	8e 77       	andi	r24, 0x7E	; 126
 718:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 71c:	61 15       	cp	r22, r1
 71e:	71 05       	cpc	r23, r1
 720:	79 f6       	brne	.-98     	; 0x6c0 <Endpoint_Write_Control_Stream_LE+0x2c>
 722:	22 23       	and	r18, r18
 724:	69 f6       	brne	.-102    	; 0x6c0 <Endpoint_Write_Control_Stream_LE+0x2c>
 726:	06 c0       	rjmp	.+12     	; 0x734 <Endpoint_Write_Control_Stream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 728:	80 91 12 01 	lds	r24, 0x0112

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 72c:	88 23       	and	r24, r24
 72e:	61 f0       	breq	.+24     	; 0x748 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 730:	85 30       	cpi	r24, 0x05	; 5
 732:	61 f0       	breq	.+24     	; 0x74c <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 734:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 738:	82 ff       	sbrs	r24, 2
 73a:	f6 cf       	rjmp	.-20     	; 0x728 <Endpoint_Write_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 73c:	80 e0       	ldi	r24, 0x00	; 0
 73e:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 740:	83 e0       	ldi	r24, 0x03	; 3
 742:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 748:	82 e0       	ldi	r24, 0x02	; 2
 74a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 74c:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 74e:	08 95       	ret

00000750 <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 750:	e8 2f       	mov	r30, r24
 752:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 754:	80 91 19 01 	lds	r24, 0x0119
 758:	90 91 1a 01 	lds	r25, 0x011A
 75c:	86 17       	cp	r24, r22
 75e:	97 07       	cpc	r25, r23
 760:	18 f4       	brcc	.+6      	; 0x768 <Endpoint_Write_Control_PStream_LE+0x18>
 762:	bc 01       	movw	r22, r24
 764:	20 e0       	ldi	r18, 0x00	; 0
 766:	38 c0       	rjmp	.+112    	; 0x7d8 <Endpoint_Write_Control_PStream_LE+0x88>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 768:	61 15       	cp	r22, r1
 76a:	71 05       	cpc	r23, r1
 76c:	d9 f7       	brne	.-10     	; 0x764 <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 76e:	80 91 e8 00 	lds	r24, 0x00E8
 772:	8e 77       	andi	r24, 0x7E	; 126
 774:	80 93 e8 00 	sts	0x00E8, r24
 778:	f5 cf       	rjmp	.-22     	; 0x764 <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 77a:	80 91 12 01 	lds	r24, 0x0112

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 77e:	88 23       	and	r24, r24
 780:	09 f4       	brne	.+2      	; 0x784 <Endpoint_Write_Control_PStream_LE+0x34>
 782:	40 c0       	rjmp	.+128    	; 0x804 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 784:	85 30       	cpi	r24, 0x05	; 5
 786:	d1 f1       	breq	.+116    	; 0x7fc <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 788:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 78c:	83 fd       	sbrc	r24, 3
 78e:	38 c0       	rjmp	.+112    	; 0x800 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 790:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 794:	82 fd       	sbrc	r24, 2
 796:	2c c0       	rjmp	.+88     	; 0x7f0 <Endpoint_Write_Control_PStream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 798:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 79c:	80 ff       	sbrs	r24, 0
 79e:	1c c0       	rjmp	.+56     	; 0x7d8 <Endpoint_Write_Control_PStream_LE+0x88>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 7a0:	80 91 f2 00 	lds	r24, 0x00F2
 7a4:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 7a8:	07 c0       	rjmp	.+14     	; 0x7b8 <Endpoint_Write_Control_PStream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 7aa:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 7ac:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 7b0:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 7b2:	61 50       	subi	r22, 0x01	; 1
 7b4:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
 7b6:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 7b8:	61 15       	cp	r22, r1
 7ba:	71 05       	cpc	r23, r1
 7bc:	19 f0       	breq	.+6      	; 0x7c4 <Endpoint_Write_Control_PStream_LE+0x74>
 7be:	88 30       	cpi	r24, 0x08	; 8
 7c0:	91 05       	cpc	r25, r1
 7c2:	98 f3       	brcs	.-26     	; 0x7aa <Endpoint_Write_Control_PStream_LE+0x5a>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 7c4:	21 e0       	ldi	r18, 0x01	; 1
 7c6:	88 30       	cpi	r24, 0x08	; 8
 7c8:	91 05       	cpc	r25, r1
 7ca:	09 f0       	breq	.+2      	; 0x7ce <Endpoint_Write_Control_PStream_LE+0x7e>
 7cc:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7ce:	80 91 e8 00 	lds	r24, 0x00E8
 7d2:	8e 77       	andi	r24, 0x7E	; 126
 7d4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 7d8:	61 15       	cp	r22, r1
 7da:	71 05       	cpc	r23, r1
 7dc:	71 f6       	brne	.-100    	; 0x77a <Endpoint_Write_Control_PStream_LE+0x2a>
 7de:	22 23       	and	r18, r18
 7e0:	61 f6       	brne	.-104    	; 0x77a <Endpoint_Write_Control_PStream_LE+0x2a>
 7e2:	06 c0       	rjmp	.+12     	; 0x7f0 <Endpoint_Write_Control_PStream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7e4:	80 91 12 01 	lds	r24, 0x0112

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7e8:	88 23       	and	r24, r24
 7ea:	61 f0       	breq	.+24     	; 0x804 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7ec:	85 30       	cpi	r24, 0x05	; 5
 7ee:	61 f0       	breq	.+24     	; 0x808 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7f0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 7f4:	82 ff       	sbrs	r24, 2
 7f6:	f6 cf       	rjmp	.-20     	; 0x7e4 <Endpoint_Write_Control_PStream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 7f8:	80 e0       	ldi	r24, 0x00	; 0
 7fa:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 7fc:	83 e0       	ldi	r24, 0x03	; 3
 7fe:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 804:	82 e0       	ldi	r24, 0x02	; 2
 806:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 808:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 80a:	08 95       	ret

0000080c <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 80c:	98 2f       	mov	r25, r24
 80e:	2c c0       	rjmp	.+88     	; 0x868 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 810:	29 2f       	mov	r18, r25
 812:	2f 70       	andi	r18, 0x0F	; 15
 814:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
 818:	98 17       	cp	r25, r24
 81a:	39 f0       	breq	.+14     	; 0x82a <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 81c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 820:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
 824:	50 91 f0 00 	lds	r21, 0x00F0
 828:	03 c0       	rjmp	.+6      	; 0x830 <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
 82a:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
 82c:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
 82e:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 830:	21 ff       	sbrs	r18, 1
 832:	19 c0       	rjmp	.+50     	; 0x866 <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 834:	30 91 eb 00 	lds	r19, 0x00EB
 838:	3e 7f       	andi	r19, 0xFE	; 254
 83a:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 83e:	30 91 ed 00 	lds	r19, 0x00ED
 842:	3d 7f       	andi	r19, 0xFD	; 253
 844:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 848:	30 91 eb 00 	lds	r19, 0x00EB
 84c:	31 60       	ori	r19, 0x01	; 1
 84e:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 852:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 856:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
 85a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 85e:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
 862:	27 ff       	sbrs	r18, 7
 864:	08 c0       	rjmp	.+16     	; 0x876 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 866:	9f 5f       	subi	r25, 0xFF	; 255
 868:	97 30       	cpi	r25, 0x07	; 7
 86a:	90 f2       	brcs	.-92     	; 0x810 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 86c:	8f 70       	andi	r24, 0x0F	; 15
 86e:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
 876:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 878:	08 95       	ret

0000087a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 87a:	80 91 13 01 	lds	r24, 0x0113
 87e:	87 ff       	sbrs	r24, 7
 880:	13 c0       	rjmp	.+38     	; 0x8a8 <Endpoint_ClearStatusStage+0x2e>
 882:	04 c0       	rjmp	.+8      	; 0x88c <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 884:	80 91 12 01 	lds	r24, 0x0112
 888:	88 23       	and	r24, r24
 88a:	b9 f0       	breq	.+46     	; 0x8ba <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 88c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 890:	82 ff       	sbrs	r24, 2
 892:	f8 cf       	rjmp	.-16     	; 0x884 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 894:	80 91 e8 00 	lds	r24, 0x00E8
 898:	8b 77       	andi	r24, 0x7B	; 123
 89a:	80 93 e8 00 	sts	0x00E8, r24
 89e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 8a0:	80 91 12 01 	lds	r24, 0x0112
 8a4:	88 23       	and	r24, r24
 8a6:	49 f0       	breq	.+18     	; 0x8ba <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8a8:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 8ac:	80 ff       	sbrs	r24, 0
 8ae:	f8 cf       	rjmp	.-16     	; 0x8a0 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8b0:	80 91 e8 00 	lds	r24, 0x00E8
 8b4:	8e 77       	andi	r24, 0x7E	; 126
 8b6:	80 93 e8 00 	sts	0x00E8, r24
 8ba:	08 95       	ret

000008bc <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 8bc:	80 91 e4 00 	lds	r24, 0x00E4
 8c0:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 8c4:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 8c6:	20 91 ec 00 	lds	r18, 0x00EC
 8ca:	20 ff       	sbrs	r18, 0
 8cc:	26 c0       	rjmp	.+76     	; 0x91a <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8ce:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 8d2:	20 fd       	sbrc	r18, 0
 8d4:	16 c0       	rjmp	.+44     	; 0x902 <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8d6:	20 91 12 01 	lds	r18, 0x0112

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8da:	22 23       	and	r18, r18
 8dc:	a1 f0       	breq	.+40     	; 0x906 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8de:	25 30       	cpi	r18, 0x05	; 5
 8e0:	a1 f0       	breq	.+40     	; 0x90a <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 8e2:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 8e6:	25 fd       	sbrc	r18, 5
 8e8:	12 c0       	rjmp	.+36     	; 0x90e <Endpoint_WaitUntilReady+0x52>
 8ea:	20 91 e4 00 	lds	r18, 0x00E4
 8ee:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 8f2:	28 17       	cp	r18, r24
 8f4:	39 07       	cpc	r19, r25
 8f6:	39 f3       	breq	.-50     	; 0x8c6 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 8f8:	44 23       	and	r20, r20
 8fa:	59 f0       	breq	.+22     	; 0x912 <Endpoint_WaitUntilReady+0x56>
 8fc:	41 50       	subi	r20, 0x01	; 1
 8fe:	c9 01       	movw	r24, r18
 900:	e2 cf       	rjmp	.-60     	; 0x8c6 <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 906:	82 e0       	ldi	r24, 0x02	; 2
 908:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 90a:	83 e0       	ldi	r24, 0x03	; 3
 90c:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 90e:	81 e0       	ldi	r24, 0x01	; 1
 910:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
 912:	84 e0       	ldi	r24, 0x04	; 4
 914:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
 916:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 918:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 91a:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 91e:	22 ff       	sbrs	r18, 2
 920:	da cf       	rjmp	.-76     	; 0x8d6 <Endpoint_WaitUntilReady+0x1a>
 922:	f9 cf       	rjmp	.-14     	; 0x916 <Endpoint_WaitUntilReady+0x5a>

00000924 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 924:	0f 93       	push	r16
 926:	1f 93       	push	r17
 928:	cf 93       	push	r28
 92a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 92c:	4e d0       	rcall	.+156    	; 0x9ca <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 92e:	55 d0       	rcall	.+170    	; 0x9da <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 930:	c8 ed       	ldi	r28, 0xD8	; 216
 932:	d0 e0       	ldi	r29, 0x00	; 0
 934:	88 81       	ld	r24, Y
 936:	8f 77       	andi	r24, 0x7F	; 127
 938:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
 93a:	88 81       	ld	r24, Y
 93c:	80 68       	ori	r24, 0x80	; 128
 93e:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 940:	88 81       	ld	r24, Y
 942:	8f 7d       	andi	r24, 0xDF	; 223
 944:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 946:	e7 ed       	ldi	r30, 0xD7	; 215
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	80 68       	ori	r24, 0x80	; 128
 94e:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 950:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 952:	10 92 12 01 	sts	0x0112, r1
	USB_Device_ConfigurationNumber  = 0;
 956:	10 92 0e 01 	sts	0x010E, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 95a:	10 92 10 01 	sts	0x0110, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 95e:	10 92 0f 01 	sts	0x010F, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 962:	00 ee       	ldi	r16, 0xE0	; 224
 964:	10 e0       	ldi	r17, 0x00	; 0
 966:	f8 01       	movw	r30, r16
 968:	80 81       	ld	r24, Z
 96a:	8b 7f       	andi	r24, 0xFB	; 251
 96c:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 96e:	88 81       	ld	r24, Y
 970:	81 60       	ori	r24, 0x01	; 1
 972:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 974:	80 e0       	ldi	r24, 0x00	; 0
 976:	60 e0       	ldi	r22, 0x00	; 0
 978:	42 e0       	ldi	r20, 0x02	; 2
 97a:	48 df       	rcall	.-368    	; 0x80c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 97c:	e1 ee       	ldi	r30, 0xE1	; 225
 97e:	f0 e0       	ldi	r31, 0x00	; 0
 980:	80 81       	ld	r24, Z
 982:	8e 7f       	andi	r24, 0xFE	; 254
 984:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 986:	e2 ee       	ldi	r30, 0xE2	; 226
 988:	f0 e0       	ldi	r31, 0x00	; 0
 98a:	80 81       	ld	r24, Z
 98c:	81 60       	ori	r24, 0x01	; 1
 98e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 990:	80 81       	ld	r24, Z
 992:	88 60       	ori	r24, 0x08	; 8
 994:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 996:	f8 01       	movw	r30, r16
 998:	80 81       	ld	r24, Z
 99a:	8e 7f       	andi	r24, 0xFE	; 254
 99c:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 99e:	88 81       	ld	r24, Y
 9a0:	80 61       	ori	r24, 0x10	; 16
 9a2:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 9a4:	df 91       	pop	r29
 9a6:	cf 91       	pop	r28
 9a8:	1f 91       	pop	r17
 9aa:	0f 91       	pop	r16
 9ac:	08 95       	ret

000009ae <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 9ae:	e8 ed       	ldi	r30, 0xD8	; 216
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	80 81       	ld	r24, Z
 9b4:	8f 7e       	andi	r24, 0xEF	; 239
 9b6:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 9b8:	e7 ed       	ldi	r30, 0xD7	; 215
 9ba:	f0 e0       	ldi	r31, 0x00	; 0
 9bc:	80 81       	ld	r24, Z
 9be:	81 60       	ori	r24, 0x01	; 1
 9c0:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 9c2:	81 e0       	ldi	r24, 0x01	; 1
 9c4:	80 93 11 01 	sts	0x0111, r24

	USB_ResetInterface();
}
 9c8:	ad cf       	rjmp	.-166    	; 0x924 <USB_ResetInterface>

000009ca <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 9ca:	e8 ed       	ldi	r30, 0xD8	; 216
 9cc:	f0 e0       	ldi	r31, 0x00	; 0
 9ce:	80 81       	ld	r24, Z
 9d0:	8c 7f       	andi	r24, 0xFC	; 252
 9d2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 9d4:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 9d8:	08 95       	ret

000009da <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 9da:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 9de:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 9e2:	08 95       	ret

000009e4 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 9e4:	1f 92       	push	r1
 9e6:	0f 92       	push	r0
 9e8:	0f b6       	in	r0, 0x3f	; 63
 9ea:	0f 92       	push	r0
 9ec:	0b b6       	in	r0, 0x3b	; 59
 9ee:	0f 92       	push	r0
 9f0:	11 24       	eor	r1, r1
 9f2:	2f 93       	push	r18
 9f4:	3f 93       	push	r19
 9f6:	4f 93       	push	r20
 9f8:	5f 93       	push	r21
 9fa:	6f 93       	push	r22
 9fc:	7f 93       	push	r23
 9fe:	8f 93       	push	r24
 a00:	9f 93       	push	r25
 a02:	af 93       	push	r26
 a04:	bf 93       	push	r27
 a06:	ef 93       	push	r30
 a08:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 a0a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 a0e:	82 ff       	sbrs	r24, 2
 a10:	0a c0       	rjmp	.+20     	; 0xa26 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 a12:	80 91 e2 00 	lds	r24, 0x00E2
 a16:	82 ff       	sbrs	r24, 2
 a18:	06 c0       	rjmp	.+12     	; 0xa26 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 a1a:	80 91 e1 00 	lds	r24, 0x00E1
 a1e:	8b 7f       	andi	r24, 0xFB	; 251
 a20:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 a24:	0a dc       	rcall	.-2028   	; 0x23a <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 a26:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 a2a:	80 ff       	sbrs	r24, 0
 a2c:	1d c0       	rjmp	.+58     	; 0xa68 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 a2e:	80 91 d8 00 	lds	r24, 0x00D8
 a32:	80 ff       	sbrs	r24, 0
 a34:	19 c0       	rjmp	.+50     	; 0xa68 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 a36:	80 91 da 00 	lds	r24, 0x00DA
 a3a:	8e 7f       	andi	r24, 0xFE	; 254
 a3c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 a40:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 a44:	80 ff       	sbrs	r24, 0
 a46:	0c c0       	rjmp	.+24     	; 0xa60 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 a48:	8c e0       	ldi	r24, 0x0C	; 12
 a4a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 a4c:	8e e0       	ldi	r24, 0x0E	; 14
 a4e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 a50:	09 b4       	in	r0, 0x29	; 41
 a52:	00 fe       	sbrs	r0, 0
 a54:	fd cf       	rjmp	.-6      	; 0xa50 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 a56:	81 e0       	ldi	r24, 0x01	; 1
 a58:	80 93 12 01 	sts	0x0112, r24
			EVENT_USB_Device_Connect();
 a5c:	ca db       	rcall	.-2156   	; 0x1f2 <EVENT_USB_Device_Connect>
 a5e:	04 c0       	rjmp	.+8      	; 0xa68 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 a60:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 a62:	10 92 12 01 	sts	0x0112, r1
			EVENT_USB_Device_Disconnect();
 a66:	cb db       	rcall	.-2154   	; 0x1fe <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 a68:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 a6c:	80 ff       	sbrs	r24, 0
 a6e:	18 c0       	rjmp	.+48     	; 0xaa0 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 a70:	80 91 e2 00 	lds	r24, 0x00E2
 a74:	80 ff       	sbrs	r24, 0
 a76:	14 c0       	rjmp	.+40     	; 0xaa0 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a78:	80 91 e2 00 	lds	r24, 0x00E2
 a7c:	8e 7f       	andi	r24, 0xFE	; 254
 a7e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a82:	80 91 e2 00 	lds	r24, 0x00E2
 a86:	80 61       	ori	r24, 0x10	; 16
 a88:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 a8c:	80 91 d8 00 	lds	r24, 0x00D8
 a90:	80 62       	ori	r24, 0x20	; 32
 a92:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 a96:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 a98:	85 e0       	ldi	r24, 0x05	; 5
 a9a:	80 93 12 01 	sts	0x0112, r24
		EVENT_USB_Device_Suspend();
 a9e:	cf d1       	rcall	.+926    	; 0xe3e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 aa0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 aa4:	84 ff       	sbrs	r24, 4
 aa6:	2f c0       	rjmp	.+94     	; 0xb06 <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 aa8:	80 91 e2 00 	lds	r24, 0x00E2
 aac:	84 ff       	sbrs	r24, 4
 aae:	2b c0       	rjmp	.+86     	; 0xb06 <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 ab0:	8c e0       	ldi	r24, 0x0C	; 12
 ab2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 ab4:	8e e0       	ldi	r24, 0x0E	; 14
 ab6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 ab8:	09 b4       	in	r0, 0x29	; 41
 aba:	00 fe       	sbrs	r0, 0
 abc:	fd cf       	rjmp	.-6      	; 0xab8 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 abe:	80 91 d8 00 	lds	r24, 0x00D8
 ac2:	8f 7d       	andi	r24, 0xDF	; 223
 ac4:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 ac8:	80 91 e1 00 	lds	r24, 0x00E1
 acc:	8f 7e       	andi	r24, 0xEF	; 239
 ace:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 ad2:	80 91 e2 00 	lds	r24, 0x00E2
 ad6:	8f 7e       	andi	r24, 0xEF	; 239
 ad8:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 adc:	80 91 e2 00 	lds	r24, 0x00E2
 ae0:	81 60       	ori	r24, 0x01	; 1
 ae2:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 ae6:	80 91 0e 01 	lds	r24, 0x010E
 aea:	88 23       	and	r24, r24
 aec:	11 f0       	breq	.+4      	; 0xaf2 <__vector_10+0x10e>
		  USB_DeviceState = DEVICE_STATE_Configured;
 aee:	84 e0       	ldi	r24, 0x04	; 4
 af0:	07 c0       	rjmp	.+14     	; 0xb00 <__vector_10+0x11c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 af2:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 af6:	87 ff       	sbrs	r24, 7
 af8:	02 c0       	rjmp	.+4      	; 0xafe <__vector_10+0x11a>
 afa:	83 e0       	ldi	r24, 0x03	; 3
 afc:	01 c0       	rjmp	.+2      	; 0xb00 <__vector_10+0x11c>
 afe:	81 e0       	ldi	r24, 0x01	; 1
 b00:	80 93 12 01 	sts	0x0112, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 b04:	9c d1       	rcall	.+824    	; 0xe3e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 b06:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 b0a:	83 ff       	sbrs	r24, 3
 b0c:	22 c0       	rjmp	.+68     	; 0xb52 <__vector_10+0x16e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 b0e:	80 91 e2 00 	lds	r24, 0x00E2
 b12:	83 ff       	sbrs	r24, 3
 b14:	1e c0       	rjmp	.+60     	; 0xb52 <__vector_10+0x16e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 b16:	80 91 e1 00 	lds	r24, 0x00E1
 b1a:	87 7f       	andi	r24, 0xF7	; 247
 b1c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 b20:	82 e0       	ldi	r24, 0x02	; 2
 b22:	80 93 12 01 	sts	0x0112, r24
		USB_Device_ConfigurationNumber = 0;
 b26:	10 92 0e 01 	sts	0x010E, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 b2a:	80 91 e1 00 	lds	r24, 0x00E1
 b2e:	8e 7f       	andi	r24, 0xFE	; 254
 b30:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 b34:	80 91 e2 00 	lds	r24, 0x00E2
 b38:	8e 7f       	andi	r24, 0xFE	; 254
 b3a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 b3e:	80 91 e2 00 	lds	r24, 0x00E2
 b42:	80 61       	ori	r24, 0x10	; 16
 b44:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 b48:	80 e0       	ldi	r24, 0x00	; 0
 b4a:	60 e0       	ldi	r22, 0x00	; 0
 b4c:	42 e0       	ldi	r20, 0x02	; 2
 b4e:	5e de       	rcall	.-836    	; 0x80c <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 b50:	76 d1       	rcall	.+748    	; 0xe3e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 b52:	ff 91       	pop	r31
 b54:	ef 91       	pop	r30
 b56:	bf 91       	pop	r27
 b58:	af 91       	pop	r26
 b5a:	9f 91       	pop	r25
 b5c:	8f 91       	pop	r24
 b5e:	7f 91       	pop	r23
 b60:	6f 91       	pop	r22
 b62:	5f 91       	pop	r21
 b64:	4f 91       	pop	r20
 b66:	3f 91       	pop	r19
 b68:	2f 91       	pop	r18
 b6a:	0f 90       	pop	r0
 b6c:	0b be       	out	0x3b, r0	; 59
 b6e:	0f 90       	pop	r0
 b70:	0f be       	out	0x3f, r0	; 63
 b72:	0f 90       	pop	r0
 b74:	1f 90       	pop	r1
 b76:	18 95       	reti

00000b78 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 b78:	1f 93       	push	r17
 b7a:	df 93       	push	r29
 b7c:	cf 93       	push	r28
 b7e:	cd b7       	in	r28, 0x3d	; 61
 b80:	de b7       	in	r29, 0x3e	; 62
 b82:	ac 97       	sbiw	r28, 0x2c	; 44
 b84:	0f b6       	in	r0, 0x3f	; 63
 b86:	f8 94       	cli
 b88:	de bf       	out	0x3e, r29	; 62
 b8a:	0f be       	out	0x3f, r0	; 63
 b8c:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 b8e:	e3 e1       	ldi	r30, 0x13	; 19
 b90:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 b92:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 b96:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 b98:	21 e0       	ldi	r18, 0x01	; 1
 b9a:	eb 31       	cpi	r30, 0x1B	; 27
 b9c:	f2 07       	cpc	r31, r18
 b9e:	c9 f7       	brne	.-14     	; 0xb92 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 ba0:	aa db       	rcall	.-2220   	; 0x2f6 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ba2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 ba6:	83 ff       	sbrs	r24, 3
 ba8:	32 c1       	rjmp	.+612    	; 0xe0e <USB_Device_ProcessControlRequest+0x296>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 baa:	80 91 13 01 	lds	r24, 0x0113

		switch (USB_ControlRequest.bRequest)
 bae:	20 91 14 01 	lds	r18, 0x0114
 bb2:	25 30       	cpi	r18, 0x05	; 5
 bb4:	09 f4       	brne	.+2      	; 0xbb8 <USB_Device_ProcessControlRequest+0x40>
 bb6:	84 c0       	rjmp	.+264    	; 0xcc0 <USB_Device_ProcessControlRequest+0x148>
 bb8:	26 30       	cpi	r18, 0x06	; 6
 bba:	40 f4       	brcc	.+16     	; 0xbcc <USB_Device_ProcessControlRequest+0x54>
 bbc:	21 30       	cpi	r18, 0x01	; 1
 bbe:	a1 f1       	breq	.+104    	; 0xc28 <USB_Device_ProcessControlRequest+0xb0>
 bc0:	21 30       	cpi	r18, 0x01	; 1
 bc2:	70 f0       	brcs	.+28     	; 0xbe0 <USB_Device_ProcessControlRequest+0x68>
 bc4:	23 30       	cpi	r18, 0x03	; 3
 bc6:	09 f0       	breq	.+2      	; 0xbca <USB_Device_ProcessControlRequest+0x52>
 bc8:	22 c1       	rjmp	.+580    	; 0xe0e <USB_Device_ProcessControlRequest+0x296>
 bca:	2e c0       	rjmp	.+92     	; 0xc28 <USB_Device_ProcessControlRequest+0xb0>
 bcc:	28 30       	cpi	r18, 0x08	; 8
 bce:	09 f4       	brne	.+2      	; 0xbd2 <USB_Device_ProcessControlRequest+0x5a>
 bd0:	f0 c0       	rjmp	.+480    	; 0xdb2 <USB_Device_ProcessControlRequest+0x23a>
 bd2:	29 30       	cpi	r18, 0x09	; 9
 bd4:	09 f4       	brne	.+2      	; 0xbd8 <USB_Device_ProcessControlRequest+0x60>
 bd6:	ff c0       	rjmp	.+510    	; 0xdd6 <USB_Device_ProcessControlRequest+0x25e>
 bd8:	26 30       	cpi	r18, 0x06	; 6
 bda:	09 f0       	breq	.+2      	; 0xbde <USB_Device_ProcessControlRequest+0x66>
 bdc:	18 c1       	rjmp	.+560    	; 0xe0e <USB_Device_ProcessControlRequest+0x296>
 bde:	93 c0       	rjmp	.+294    	; 0xd06 <USB_Device_ProcessControlRequest+0x18e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 be0:	80 38       	cpi	r24, 0x80	; 128
 be2:	21 f0       	breq	.+8      	; 0xbec <USB_Device_ProcessControlRequest+0x74>
 be4:	82 38       	cpi	r24, 0x82	; 130
 be6:	09 f0       	breq	.+2      	; 0xbea <USB_Device_ProcessControlRequest+0x72>
 be8:	12 c1       	rjmp	.+548    	; 0xe0e <USB_Device_ProcessControlRequest+0x296>
 bea:	08 c0       	rjmp	.+16     	; 0xbfc <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 bec:	80 91 0f 01 	lds	r24, 0x010F
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 bf0:	90 91 10 01 	lds	r25, 0x0110
 bf4:	99 23       	and	r25, r25
 bf6:	71 f0       	breq	.+28     	; 0xc14 <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 bf8:	82 60       	ori	r24, 0x02	; 2
 bfa:	0c c0       	rjmp	.+24     	; 0xc14 <USB_Device_ProcessControlRequest+0x9c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bfc:	80 91 17 01 	lds	r24, 0x0117
 c00:	8f 70       	andi	r24, 0x0F	; 15
 c02:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 c06:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
 c0a:	81 e0       	ldi	r24, 0x01	; 1
 c0c:	95 ff       	sbrs	r25, 5
 c0e:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c10:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c14:	90 91 e8 00 	lds	r25, 0x00E8
 c18:	97 7f       	andi	r25, 0xF7	; 247
 c1a:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 c1e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 c22:	10 92 f1 00 	sts	0x00F1, r1
 c26:	d0 c0       	rjmp	.+416    	; 0xdc8 <USB_Device_ProcessControlRequest+0x250>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c28:	88 23       	and	r24, r24
 c2a:	19 f0       	breq	.+6      	; 0xc32 <USB_Device_ProcessControlRequest+0xba>
 c2c:	82 30       	cpi	r24, 0x02	; 2
 c2e:	09 f0       	breq	.+2      	; 0xc32 <USB_Device_ProcessControlRequest+0xba>
 c30:	ee c0       	rjmp	.+476    	; 0xe0e <USB_Device_ProcessControlRequest+0x296>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	8f 71       	andi	r24, 0x1F	; 31
 c36:	90 70       	andi	r25, 0x00	; 0
 c38:	00 97       	sbiw	r24, 0x00	; 0
 c3a:	29 f0       	breq	.+10     	; 0xc46 <USB_Device_ProcessControlRequest+0xce>
 c3c:	82 30       	cpi	r24, 0x02	; 2
 c3e:	91 05       	cpc	r25, r1
 c40:	09 f0       	breq	.+2      	; 0xc44 <USB_Device_ProcessControlRequest+0xcc>
 c42:	e5 c0       	rjmp	.+458    	; 0xe0e <USB_Device_ProcessControlRequest+0x296>
 c44:	0b c0       	rjmp	.+22     	; 0xc5c <USB_Device_ProcessControlRequest+0xe4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 c46:	80 91 15 01 	lds	r24, 0x0115
 c4a:	81 30       	cpi	r24, 0x01	; 1
 c4c:	09 f0       	breq	.+2      	; 0xc50 <USB_Device_ProcessControlRequest+0xd8>
 c4e:	df c0       	rjmp	.+446    	; 0xe0e <USB_Device_ProcessControlRequest+0x296>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 c50:	23 30       	cpi	r18, 0x03	; 3
 c52:	09 f0       	breq	.+2      	; 0xc56 <USB_Device_ProcessControlRequest+0xde>
 c54:	80 e0       	ldi	r24, 0x00	; 0
 c56:	80 93 10 01 	sts	0x0110, r24
 c5a:	2c c0       	rjmp	.+88     	; 0xcb4 <USB_Device_ProcessControlRequest+0x13c>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 c5c:	80 91 15 01 	lds	r24, 0x0115
 c60:	88 23       	and	r24, r24
 c62:	41 f5       	brne	.+80     	; 0xcb4 <USB_Device_ProcessControlRequest+0x13c>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 c64:	20 91 17 01 	lds	r18, 0x0117
 c68:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 c6a:	09 f4       	brne	.+2      	; 0xc6e <USB_Device_ProcessControlRequest+0xf6>
 c6c:	d0 c0       	rjmp	.+416    	; 0xe0e <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c6e:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 c72:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 c76:	80 ff       	sbrs	r24, 0
 c78:	1d c0       	rjmp	.+58     	; 0xcb4 <USB_Device_ProcessControlRequest+0x13c>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 c7a:	80 91 14 01 	lds	r24, 0x0114
 c7e:	83 30       	cpi	r24, 0x03	; 3
 c80:	21 f4       	brne	.+8      	; 0xc8a <USB_Device_ProcessControlRequest+0x112>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c82:	80 91 eb 00 	lds	r24, 0x00EB
 c86:	80 62       	ori	r24, 0x20	; 32
 c88:	13 c0       	rjmp	.+38     	; 0xcb0 <USB_Device_ProcessControlRequest+0x138>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 c8a:	80 91 eb 00 	lds	r24, 0x00EB
 c8e:	80 61       	ori	r24, 0x10	; 16
 c90:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 c94:	81 e0       	ldi	r24, 0x01	; 1
 c96:	90 e0       	ldi	r25, 0x00	; 0
 c98:	02 c0       	rjmp	.+4      	; 0xc9e <USB_Device_ProcessControlRequest+0x126>
 c9a:	88 0f       	add	r24, r24
 c9c:	99 1f       	adc	r25, r25
 c9e:	2a 95       	dec	r18
 ca0:	e2 f7       	brpl	.-8      	; 0xc9a <USB_Device_ProcessControlRequest+0x122>
 ca2:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 ca6:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 caa:	80 91 eb 00 	lds	r24, 0x00EB
 cae:	88 60       	ori	r24, 0x08	; 8
 cb0:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cb4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cb8:	80 91 e8 00 	lds	r24, 0x00E8
 cbc:	87 7f       	andi	r24, 0xF7	; 247
 cbe:	87 c0       	rjmp	.+270    	; 0xdce <USB_Device_ProcessControlRequest+0x256>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 cc0:	88 23       	and	r24, r24
 cc2:	09 f0       	breq	.+2      	; 0xcc6 <USB_Device_ProcessControlRequest+0x14e>
 cc4:	a4 c0       	rjmp	.+328    	; 0xe0e <USB_Device_ProcessControlRequest+0x296>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 cc6:	10 91 15 01 	lds	r17, 0x0115
 cca:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 ccc:	80 91 e3 00 	lds	r24, 0x00E3
 cd0:	80 78       	andi	r24, 0x80	; 128
 cd2:	81 2b       	or	r24, r17
 cd4:	80 93 e3 00 	sts	0x00E3, r24
 cd8:	80 91 e8 00 	lds	r24, 0x00E8
 cdc:	87 7f       	andi	r24, 0xF7	; 247
 cde:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 ce2:	cb dd       	rcall	.-1130   	; 0x87a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 ce4:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 ce8:	80 ff       	sbrs	r24, 0
 cea:	fc cf       	rjmp	.-8      	; 0xce4 <USB_Device_ProcessControlRequest+0x16c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 cec:	80 91 e3 00 	lds	r24, 0x00E3
 cf0:	80 68       	ori	r24, 0x80	; 128
 cf2:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 cf6:	11 23       	and	r17, r17
 cf8:	11 f0       	breq	.+4      	; 0xcfe <USB_Device_ProcessControlRequest+0x186>
 cfa:	83 e0       	ldi	r24, 0x03	; 3
 cfc:	01 c0       	rjmp	.+2      	; 0xd00 <USB_Device_ProcessControlRequest+0x188>
 cfe:	82 e0       	ldi	r24, 0x02	; 2
 d00:	80 93 12 01 	sts	0x0112, r24
 d04:	84 c0       	rjmp	.+264    	; 0xe0e <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 d06:	80 58       	subi	r24, 0x80	; 128
 d08:	82 30       	cpi	r24, 0x02	; 2
 d0a:	08 f0       	brcs	.+2      	; 0xd0e <USB_Device_ProcessControlRequest+0x196>
 d0c:	80 c0       	rjmp	.+256    	; 0xe0e <USB_Device_ProcessControlRequest+0x296>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 d0e:	80 91 15 01 	lds	r24, 0x0115
 d12:	90 91 16 01 	lds	r25, 0x0116
 d16:	23 e0       	ldi	r18, 0x03	; 3
 d18:	8c 3d       	cpi	r24, 0xDC	; 220
 d1a:	92 07       	cpc	r25, r18
 d1c:	91 f5       	brne	.+100    	; 0xd82 <USB_Device_ProcessControlRequest+0x20a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 d1e:	83 e0       	ldi	r24, 0x03	; 3
 d20:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 d22:	8a e2       	ldi	r24, 0x2A	; 42
 d24:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 d26:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 d28:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 d2a:	de 01       	movw	r26, r28
 d2c:	15 96       	adiw	r26, 0x05	; 5
 d2e:	80 e0       	ldi	r24, 0x00	; 0
 d30:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 d32:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 d34:	61 e2       	ldi	r22, 0x21	; 33
 d36:	e4 2f       	mov	r30, r20
 d38:	f0 e0       	ldi	r31, 0x00	; 0
 d3a:	60 93 57 00 	sts	0x0057, r22
 d3e:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
 d40:	80 ff       	sbrs	r24, 0
 d42:	03 c0       	rjmp	.+6      	; 0xd4a <USB_Device_ProcessControlRequest+0x1d2>
					{
						SerialByte >>= 4;
 d44:	e2 95       	swap	r30
 d46:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 d48:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 d4a:	ef 70       	andi	r30, 0x0F	; 15
 d4c:	2e 2f       	mov	r18, r30
 d4e:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 d50:	ea 30       	cpi	r30, 0x0A	; 10
 d52:	18 f0       	brcs	.+6      	; 0xd5a <USB_Device_ProcessControlRequest+0x1e2>
 d54:	29 5c       	subi	r18, 0xC9	; 201
 d56:	3f 4f       	sbci	r19, 0xFF	; 255
 d58:	02 c0       	rjmp	.+4      	; 0xd5e <USB_Device_ProcessControlRequest+0x1e6>
 d5a:	20 5d       	subi	r18, 0xD0	; 208
 d5c:	3f 4f       	sbci	r19, 0xFF	; 255
 d5e:	2d 93       	st	X+, r18
 d60:	3d 93       	st	X+, r19
 d62:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 d64:	84 31       	cpi	r24, 0x14	; 20
 d66:	91 05       	cpc	r25, r1
 d68:	31 f7       	brne	.-52     	; 0xd36 <USB_Device_ProcessControlRequest+0x1be>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 d6a:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d6c:	80 91 e8 00 	lds	r24, 0x00E8
 d70:	87 7f       	andi	r24, 0xF7	; 247
 d72:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 d76:	ce 01       	movw	r24, r28
 d78:	03 96       	adiw	r24, 0x03	; 3
 d7a:	6a e2       	ldi	r22, 0x2A	; 42
 d7c:	70 e0       	ldi	r23, 0x00	; 0
 d7e:	8a dc       	rcall	.-1772   	; 0x694 <Endpoint_Write_Control_Stream_LE>
 d80:	12 c0       	rjmp	.+36     	; 0xda6 <USB_Device_ProcessControlRequest+0x22e>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 d82:	60 91 17 01 	lds	r22, 0x0117
 d86:	ae 01       	movw	r20, r28
 d88:	4f 5f       	subi	r20, 0xFF	; 255
 d8a:	5f 4f       	sbci	r21, 0xFF	; 255
 d8c:	e7 db       	rcall	.-2098   	; 0x55c <CALLBACK_USB_GetDescriptor>
 d8e:	bc 01       	movw	r22, r24
 d90:	00 97       	sbiw	r24, 0x00	; 0
 d92:	09 f4       	brne	.+2      	; 0xd96 <USB_Device_ProcessControlRequest+0x21e>
 d94:	3c c0       	rjmp	.+120    	; 0xe0e <USB_Device_ProcessControlRequest+0x296>
 d96:	80 91 e8 00 	lds	r24, 0x00E8
 d9a:	87 7f       	andi	r24, 0xF7	; 247
 d9c:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 da0:	89 81       	ldd	r24, Y+1	; 0x01
 da2:	9a 81       	ldd	r25, Y+2	; 0x02
 da4:	d5 dc       	rcall	.-1622   	; 0x750 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 da6:	80 91 e8 00 	lds	r24, 0x00E8
 daa:	8b 77       	andi	r24, 0x7B	; 123
 dac:	80 93 e8 00 	sts	0x00E8, r24
 db0:	2e c0       	rjmp	.+92     	; 0xe0e <USB_Device_ProcessControlRequest+0x296>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 db2:	80 38       	cpi	r24, 0x80	; 128
 db4:	61 f5       	brne	.+88     	; 0xe0e <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 db6:	80 91 e8 00 	lds	r24, 0x00E8
 dba:	87 7f       	andi	r24, 0xF7	; 247
 dbc:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 dc0:	80 91 0e 01 	lds	r24, 0x010E
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 dc4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 dc8:	80 91 e8 00 	lds	r24, 0x00E8
 dcc:	8e 77       	andi	r24, 0x7E	; 126
 dce:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 dd2:	53 dd       	rcall	.-1370   	; 0x87a <Endpoint_ClearStatusStage>
 dd4:	1c c0       	rjmp	.+56     	; 0xe0e <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 dd6:	88 23       	and	r24, r24
 dd8:	d1 f4       	brne	.+52     	; 0xe0e <USB_Device_ProcessControlRequest+0x296>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 dda:	90 91 15 01 	lds	r25, 0x0115
 dde:	92 30       	cpi	r25, 0x02	; 2
 de0:	b0 f4       	brcc	.+44     	; 0xe0e <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 de2:	80 91 e8 00 	lds	r24, 0x00E8
 de6:	87 7f       	andi	r24, 0xF7	; 247
 de8:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 dec:	90 93 0e 01 	sts	0x010E, r25

	Endpoint_ClearStatusStage();
 df0:	44 dd       	rcall	.-1400   	; 0x87a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 df2:	80 91 0e 01 	lds	r24, 0x010E
 df6:	88 23       	and	r24, r24
 df8:	21 f4       	brne	.+8      	; 0xe02 <USB_Device_ProcessControlRequest+0x28a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 dfa:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 dfe:	87 ff       	sbrs	r24, 7
 e00:	02 c0       	rjmp	.+4      	; 0xe06 <USB_Device_ProcessControlRequest+0x28e>
 e02:	84 e0       	ldi	r24, 0x04	; 4
 e04:	01 c0       	rjmp	.+2      	; 0xe08 <USB_Device_ProcessControlRequest+0x290>
 e06:	81 e0       	ldi	r24, 0x01	; 1
 e08:	80 93 12 01 	sts	0x0112, r24

	EVENT_USB_Device_ConfigurationChanged();
 e0c:	fa d9       	rcall	.-3084   	; 0x202 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e0e:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 e12:	83 ff       	sbrs	r24, 3
 e14:	0a c0       	rjmp	.+20     	; 0xe2a <USB_Device_ProcessControlRequest+0x2b2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e16:	80 91 e8 00 	lds	r24, 0x00E8
 e1a:	87 7f       	andi	r24, 0xF7	; 247
 e1c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 e20:	80 91 eb 00 	lds	r24, 0x00EB
 e24:	80 62       	ori	r24, 0x20	; 32
 e26:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 e2a:	ac 96       	adiw	r28, 0x2c	; 44
 e2c:	0f b6       	in	r0, 0x3f	; 63
 e2e:	f8 94       	cli
 e30:	de bf       	out	0x3e, r29	; 62
 e32:	0f be       	out	0x3f, r0	; 63
 e34:	cd bf       	out	0x3d, r28	; 61
 e36:	cf 91       	pop	r28
 e38:	df 91       	pop	r29
 e3a:	1f 91       	pop	r17
 e3c:	08 95       	ret

00000e3e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 e3e:	08 95       	ret

00000e40 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 e40:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 e42:	80 91 12 01 	lds	r24, 0x0112
 e46:	88 23       	and	r24, r24
 e48:	a9 f0       	breq	.+42     	; 0xe74 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 e4a:	80 91 e9 00 	lds	r24, 0x00E9
 e4e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 e50:	90 91 ec 00 	lds	r25, 0x00EC
 e54:	90 ff       	sbrs	r25, 0
 e56:	02 c0       	rjmp	.+4      	; 0xe5c <USB_USBTask+0x1c>
 e58:	10 e8       	ldi	r17, 0x80	; 128
 e5a:	01 c0       	rjmp	.+2      	; 0xe5e <USB_USBTask+0x1e>
 e5c:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 e5e:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e60:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e64:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 e68:	83 ff       	sbrs	r24, 3
 e6a:	01 c0       	rjmp	.+2      	; 0xe6e <USB_USBTask+0x2e>
	  USB_Device_ProcessControlRequest();
 e6c:	85 de       	rcall	.-758    	; 0xb78 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e6e:	1f 70       	andi	r17, 0x0F	; 15
 e70:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 e74:	1f 91       	pop	r17
 e76:	08 95       	ret

00000e78 <memcmp>:
 e78:	fb 01       	movw	r30, r22
 e7a:	dc 01       	movw	r26, r24
 e7c:	04 c0       	rjmp	.+8      	; 0xe86 <memcmp+0xe>
 e7e:	8d 91       	ld	r24, X+
 e80:	01 90       	ld	r0, Z+
 e82:	80 19       	sub	r24, r0
 e84:	21 f4       	brne	.+8      	; 0xe8e <memcmp+0x16>
 e86:	41 50       	subi	r20, 0x01	; 1
 e88:	50 40       	sbci	r21, 0x00	; 0
 e8a:	c8 f7       	brcc	.-14     	; 0xe7e <memcmp+0x6>
 e8c:	88 1b       	sub	r24, r24
 e8e:	99 0b       	sbc	r25, r25
 e90:	08 95       	ret

00000e92 <_exit>:
 e92:	f8 94       	cli

00000e94 <__stop_program>:
 e94:	ff cf       	rjmp	.-2      	; 0xe94 <__stop_program>
